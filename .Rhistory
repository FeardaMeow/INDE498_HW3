mean(df.data$review_scores_rating, na.rm = TRUE)
n <- 40
set.seed(343)
x1<-rnorm(n)
x2<-2-3*x1
y<-rnorm(n,mean=4+x1+x2,sd=1)
lm.1<-lm(y~x1+x2)
summary(lm.1)
lm.1.2 <- lm(y~x2+x1)
summary(lm.1.2)
n <- 40
set.seed(343)
x1<-rnorm(n)
x2<-2-3*x1
y<-rnorm(n,mean=4+x1+x2,sd=1)
lm.1<-lm(y~x1+x2)
summary(lm.1)
lm.1.2 <- lm(y~x2+x1)
summary(lm.1.2)
n <- 40
set.seed(101)
x1<-rnorm(n)
x2<-2-3*x1
x2.err<-x2 + runif(n, min=-0.01, max=0.01)
y4<-rnorm(n,mean=4+x1+x2.err, sd=1)
lm.4<-lm(y4~x1+x2.err)
summary(lm.4)
n <- 40
set.seed(101)
x1<-rnorm(n)
x2<-2-3*x1
x2.err<-x2 + runif(n, min=-0.01, max=0.01)
y4<-rnorm(n,mean=4+x1+x2.err, sd=1)
lm.4<-lm(y4~x1+x2.err)
summary(lm.4)
dm.lm4 <- model.matrix((lm.4))
lm.lm4.values <- eigen(t(dm.lm4)%*%lm.lm4)$values
dm.lm4.values <- eigen(t(dm.lm4)%*%lm.lm4)$values
dm.lm4.values <- eigen(t(dm.lm4)%*%dm.lm4)$values
dm.lm4.values
library(alr4)
df.p1 <- BGSgirls
lm1.2 <- lm(Soma~LG9+WT9,data=df.p1)
lm1.3 <- lm(Soma~LG9,data=df.p1)
pairs(~Soma+LG9+WT9,data=df.p1, main="Multiple Scatterplot Matrix")
library(alr4)
df.p1 <- BGSgirls
lm1.2 <- lm(Soma~LG9+WT9,data=df.p1)
lm1.3 <- lm(Soma~LG9,data=df.p1)
pairs(~Soma+LG9+WT9,data=df.p1, main="Multiple Scatterplot Matrix")
avPlots(lm1.2, ~WT9)
library(alr4)
df.p1 <- BGSgirls
lm1.2 <- lm(Soma~LG9+WT9,data=df.p1)
lm1.3 <- lm(Soma~WT9+LG9,data=df.p1)
aov1.4 <- anova(lm1.2)
aov1.5 <- anova(lm1.2)
summary(aov1.4)
aov1.4
aov1.5
aov1.5 <- anova(lm1.3)
aov1.5
aov1.5
avPlots(lm1.2, ~WT9)
aov1.4
set.seed(102)
x1 <- runif(60,min=-1,max=6)
x2 <- rbinom(60,size=3,prob=0.7)
set.seed(102)
x1 <- runif(60,min=-1,max=6)
x2 <- rbinom(60,size=3,prob=0.7)
error <- rnorm(60, mean = 0, sd = 1)
y <- 3-1.7*x1+error
plot(x1,y)
avPlots(lm1.2, ~WT9, main="Added")
avPlots(lm1.2, ~WT9, main="Added variable plot of Age 9 weight")
avPlots(lm1.2, ~WT9, main="Added variable plot of Age 9 weight")
avPlots(lm1.2, ~WT9, main="Added variable plot of Age 9 weight")
avPlots(lm1.2, ~WT9, main="Added variable plot of Age 9 weight")
plot(x1,y, main="Scatter plot of y versus x1")
avPlots(lm(y~x1+x2), ~x1, main="Added variable plot of Age 9 weight")
plot(x1,y, main="Scatter plot of y versus x1")
avPlots(lm(y~x1+x2), ~x1, main="Added variable plot of Age 9 weight")
plot(x1,y, main="Scatter plot of y versus x1")
avPlots(lm(y~x1+x2), ~x1, main="Added variable plot of Age 9 weight")
set.seed(102)
x1 <- runif(60,min=-1,max=6)
x2 <- rbinom(60,size=3,prob=0.7)
error <- rnorm(60, mean = 0, sd = 1)
y <- 3-1.7*x1+error
lm1 <- lm(y~x1+x2)
aov1 <- anova(lm1)
set.seed(102)
x1 <- runif(60,min=-1,max=6)
x2 <- rbinom(60,size=3,prob=0.7)
error <- rnorm(60, mean = 0, sd = 1)
y <- 3-1.7*x1+error
lm1 <- lm(y~x1+x2)
aov2.2 <- anova(lm1)
aov2.2
library(data.table)
library(dplyr)
equalWidth <- function(n, df) {
for (i in 1:n) {
quantile(df, c(seq(0, 1, by=1/n)))[i+1]
df[(df>=quantile(df, c(seq(0, 1, by=1/n)))[i]) & (df<=quantile(df, c(seq(0, 1, by=1/n)))[i+1])] <- i
}
return(df)
}
df.sa <- fread('data\\new\\SA.csv', header = T, sep=',',na.strings=c(""))
df.carrier <- fread('data\\new\\CARRIER.csv', header = T, sep=',',na.strings=c(""))
df.cargo <- fread('data\\new\\CARGO.csv', header = T, sep=',',na.strings=c(""))
df.driver <- fread('data\\new\\DRIVER.csv', header = T, sep=',',na.strings=c(""))
library(data.table)
library(bnlearn)
setwd('D:\\Program File\\Git\\git_projects\\STATS 504\\ProjectProposal\\stat-504-airbnb\\data')
lm2.3 <- lm(Distance~I(Speed^2),data=df.2,weights=(1/Speed))
library(alr4)
library(ggplot2)
library(knitr)
library(MASS)
library(boot)
df.1 <- salarygov
p <- ggplot(df.1, aes(x=NE, y=MaxSalary))
p + geom_point() + ggtitle("Max Salary depending on number of employees employed in each job class") + xlab("Number of Employees employed in job class") + ylab("Max Salary ($)")
df.2 <- stopping
p <- ggplot(df.2, aes(x=Speed, y=Distance))
p + geom_point() + ggtitle("Stopping distance depending on speed") + xlab("Speed (mph)") + ylab("Stopping Distance (feet)") + geom_smooth(method="lm", se=FALSE, color="red") +
geom_smooth(method = "lm", se = FALSE, formula= y ~ splines::bs(x,3))
lm2.2 <- lm(Distance~I(Speed^2),data=df.2)
plot(lm2.2,1)
lm2.3 <- lm(Distance~I(Speed^2),data=df.2,weights=(1/Speed))
summary(lm2.3)
library(alr4)
library(faraway)
library(MASS)
clear()
data = readRDS("Quiz2Data.RDS")
pairs(data, pch=16, col=rgb(0,0,0,0.5))
install.packages("shinydashboard")
install.packages("plotly")
install.packages("timevis")
shiny::runApp('D:/Games/Downloads')
shiny::runApp('D:/Program File/Git/git_projects/RA/DataVis')
(shiny.port = 7775)
options(shiny.host = "192.168.1.36")
options(shiny.port = 7775)
runApp(app)
shiny::runApp('D:/Program File/Git/git_projects/RA/DataVis')
runApp('D:/Program File/Git/git_projects/RA/DataVis')
options(shiny.host = "216.243.41.19")
runApp('D:/Program File/Git/git_projects/RA/DataVis')
runApp('D:/Program File/Git/git_projects/RA/DataVis')
runApp('D:/Program File/Git/git_projects/RA/DataVis')
runApp('D:/Program File/Git/git_projects/RA/DataVis')
options(shiny.port = 7775)
shiny::runApp('D:/Program File/Git/git_projects/RA/DataVis')
options(shiny.host = "192.168.1.36")
runApp('D:/Program File/Git/git_projects/RA/DataVis')
runApp('D:/Program File/Git/git_projects/RA/DataVis')
runApp('D:/Program File/Git/git_projects/RA/DataVis')
runApp('D:/Program File/Git/git_projects/RA/DataVis')
runApp('D:/Program File/Git/git_projects/RA/DataVis')
runApp('D:/Program File/Git/git_projects/RA/DataVis')
runApp('D:/Program File/Git/git_projects/RA/DataVis')
runApp('D:/Program File/Git/git_projects/RA/DataVis')
runApp('D:/Program File/Git/git_projects/RA/DataVis')
shiny::runApp('D:/Program File/Git/git_projects/RA/DataVis')
runApp('D:/Program File/Git/git_projects/RA/DataVis')
shiny::runApp('D:/Program File/Git/git_projects/RA/VizProto/DMDII-prototype')
library(shiny)
runApp('D:/Program File/Git/git_projects/RA/VizProto/DMDII-prototype')
install.packages(c("bindrcpp", "DBI", "dplyr", "forecast", "glue", "mapproj", "maps", "R6", "rmarkdown", "shinydashboard", "XML"))
remove.packages("makeR")
library(dplyr)
library(arules)
library(arulesViz)
library(ggplot2)
setwd("D:\\Program File\\Git\\git_projects\\interview\\zappos\\data")
df.events <- read.csv("events.csv", colClasses = c("numeric", "factor", "factor", "factor", "factor"))
#Unix to r date
df.events$timestamp <- as.POSIXct(df.events$timestamp/1000, origin="1970-01-01")
#Remove all users with only 1 session
df.summary <- df.events %>% group_by(visitorid) %>% summarise(count=n()) %>% filter(count > 1)
df.events <- df.events %>% filter(visitorid %in% unique(df.summary$visitorid)) %>% arrange(visitorid, timestamp)
#Identify unique sessions for each user and creating unique session id
#Session = 120 min between last event
df.events$tdiff <- unlist(tapply(df.events$timestamp, INDEX = df.events$visitorid, FUN = function(x) c(0, `units<-`(diff(x), "mins"))))
n <- 1
myFunction <- function(x) {
if (x == 0) {
n <<-1
}
if (x > 120) {
n <<- n+1
}
return(n)
}
df.events$sessionid <- mapply(df.events$tdiff, FUN=myFunction)
#Unique id combined visitorid and sessionid
df.events$vistorSessiondID <- df.events %>% group_indices(visitorid, sessionid)
write.csv(df.events[,c(8,4)], file="transactions", row.names = FALSE)
tr <- read.transactions("transactions", format = "single", cols = c(1,2), sep = ",")
rules <- apriori(tr, parameter = list(support=0.001, confidence=0.5))
summary(rules)
rules <- apriori(transaction.events)
transaction.events <- read.transactions("transactions", format = "single", cols = c(1,2), sep = ",")
transaction.events <- read.transactions("transactions", format = "single", cols = c(1,2), sep = ",")
rules <- apriori(transaction.events)
inspect(tr)
df.summary <- df.events %>% group_by(itemid) %>% summarise(count=n())
View(df.summary)
df.events <- df.events %>% filter(itemid %in% unique(df.summary$itemid[df.summary$count >= 5]))
df.events$vistorSessiondID <- df.events %>% group_indices(visitorid, sessionid)
write.csv(df.events[,c(8,4)], file="transactions", row.names = FALSE)
transaction.events <- read.transactions("transactions", format = "single", cols = c(1,2), sep = ",")
rules <- apriori(transaction.events)
data("groceries")
data("Groceries")
inspect(Groceries)
rules <- apriori(Groceries)
apriori(Groceries, parameter=list(support=0.001, confidence=0.5))
library(dplyr)
library(arules)
library(arulesViz)
library(ggplot2)
setwd("D:\\Program File\\Git\\git_projects\\interview\\zappos\\data")
df.events <- read.csv("events.csv", colClasses = c("numeric", "factor", "factor", "factor", "factor"))
#Unix to r date
df.events$timestamp <- as.POSIXct(df.events$timestamp/1000, origin="1970-01-01")
#Remove all users with only 1 session
df.summary <- df.events %>% group_by(visitorid) %>% summarise(count=n()) %>% filter(count > 1)
df.events <- df.events %>% filter(visitorid %in% unique(df.summary$visitorid)) %>% arrange(visitorid, timestamp)
#Identify unique sessions for each user and creating unique session id
#Session = 120 min between last event
df.events$tdiff <- unlist(tapply(df.events$timestamp, INDEX = df.events$visitorid, FUN = function(x) c(0, `units<-`(diff(x), "mins"))))
n <- 1
myFunction <- function(x) {
if (x == 0) {
n <<-1
}
if (x > 120) {
n <<- n+1
}
return(n)
}
df.events$sessionid <- mapply(df.events$tdiff, FUN=myFunction)
df.summary <- df.events %>% group_by(itemid) %>% summarise(count=n())
df.events <- df.events %>% filter(itemid %in% unique(df.summary$itemid[df.summary$count >= 5]))
#Unique id combined visitorid and sessionid
df.events$vistorSessiondID <- df.events %>% group_indices(visitorid, sessionid)
write.csv(df.events[,c(8,4)], file="transactions", row.names = FALSE)
transaction.events <- read.transactions("transactions", format = "single", cols = c(1,2), sep = ",")
rules <- apriori(transaction.events,  parameter=list(support=0.001, confidence=0.1))
rules <- apriori(transaction.events,  parameter=list(support=0.1, confidence=0.01))
rules <- apriori(transaction.events,  parameter=list(support=0.000001, confidence=0.01))
rules <- apriori(transaction.events,  parameter=list(support=0.0001, confidence=0.01))
rules
summary(rules)
library(rpart)
library(MASS)
df.car <- read.csv("cu.summary.csv")
df.males <- read.csv("Males.csv")
#getting rid of column identifier
df.males <- df.males[,-1]
df.car <- df.car[,-1]
lm.males <- lm(wage~., data=df.males)
summary(lm.males)
lm.males <- stepAIC(lm.males, direction="both")
summary(lm.males)
plot(lm.males)
plot(lm.males)[1]
plot(lm.males, which=c(1))
plot(lm.males, which=c(1))
plot(lm.males, which=c(1))
plot(lm.males, which=c(2))
install.packages("rpart.plot")
library(rpart.plot)
prp(tr.car, nn.cex=1)
tr.car <- rpart(Price~., data=df.car)
prp(tr.car, nn.cex=1)
tr.males <- rpart(wage~.,data=df.males)
prp(tr.males, nn.cex=1)
summary(lm.males)
shiny::runApp('D:/Program File/Git/git_projects/RA/UsabilityStudy')
runApp('D:/Program File/Git/git_projects/RA/UsabilityStudy')
setwd("D:\\Program File\\Git\\git_projects\\INDE 498\\INDE498_HW3")
ch4ex2.gpa <- read.csv("MedGPA.csv")
ch4ex2.gpa <- read.csv("MedGPA.csv", colClasses = c("int",rep("factor",3)))
ch4ex2.gpa <- read.csv("MedGPA.csv", colClasses = c("integer",rep("factor",3)))
ch4ex2.gpa <- read.csv("MedGPA.csv", colClasses = c("integer",rep("Factor",3)))
View(ch4ex2.gpa)
rep("factor",3)
ch4ex2.gpa <- read.csv("MedGPA.csv", colClasses = c("integer",rep("factor",3),rep("numeric",2),rep("integer",6)))
ch4ex2.gpa <- read.csv("MedGPA.csv", colClasses = c("character",rep("factor",3),rep("numeric",2),rep("integer",6)))
ch4ex2.bh <- read.csv("badhealth.csv")
ch4ex2.bh <- read.csv("badhealth.csv", colClasses = c("character","integer","factor","integer"))
ch4ex2.gpa <- ch4ex2.gpa %>% filter(-X)
library(dplyr)
ch4ex2.gpa <- ch4ex2.gpa %>% filter(-X)
ch4ex2.bh <- ch4ex2.bh %>% filter(-X)
ch4ex2.gpa <- ch4ex2.gpa %>% select(-X)
ch4ex2.bh <- ch4ex2.bh %>% select(-X)
library(boot)
temp <- glm(formula = badh~., family = binomial(link='logit'),data=ch4ex2.bh)
temp$coefficients
temp$coefficients[1]
library(boot)
logCoeff.p = function(data,b,formula) {
d <- data[b,]
return(glm(formula = badh~., family = binomial(link='logit'),data=d)$coefficients)
}
boottest <- boot(data = ch4ex2.bh, statistic=logCoeff, R=100)
logCoeff.p = function(data,b,formula) {
d <- data[b,]
return(glm(formula = badh~., family = binomial(link='logit'),data=d)$coefficients)
}
boottest <- boot(data = ch4ex2.bh, statistic=logCoeff.p, R=100)
boottest[1]
boottest[1][1]
boottest[1][2]
boottest[1]$t0
boottest[1]$t0[1]
boottest[2]$t0[1]
boottest
boottest$R
boottest$statistic()
boottest$t
boottest$t0
boot.ci(boottest)
boot.ci(boottest, type="bca")
boot.ci(boottest, type="bca",index=1)
temp <- glm(formula = badh~., family = binomial(link='logit'),data=d)
temp <- glm(formula = badh~., family = binomial(link='logit'),data=ch4ex2.bh)
coefficients(temp)
logCoeff.p = function(data,b,formula) {
d <- data[b,]
return(coefficients(glm(formula = badh~., family = binomial(link='logit'),data=d)))
}
boottest <- boot(data = ch4ex2.bh, statistic=logCoeff.p, R=100)
boot.ci(boottest, type="bca", index=1)
logCoeff.p = function(data,b,formula) {
d <- data[b,]
return(coefficients(glm(formula., family = binomial(link='logit'),data=d)))
}
boottest <- boot(data = ch4ex2.bh, statistic=logCoeff.p, R=100, formula=badh~.)
logCoeff.p = function(data,b,formula) {
d <- data[b,]
return(coefficients(glm(formula., family = binomial(link='logit'),data=d)))
}
boottest <- boot(data = ch4ex2.bh, statistic=logCoeff.p, R=100, formula=badh~numvisit+age)
logCoeff.p = function(data,b,formula) {
d <- data[b,]
return(coefficients(glm(formula, family = binomial(link='logit'),data=d)))
}
boottest <- boot(data = ch4ex2.bh, statistic=logCoeff.p, R=100, formula=badh~numvisit+age)
boot.ci(boottest, type="bca", index=1)
boot.ci(boottest, type="bca", index=2)
boot.ci(boottest, type="bca", index=3)
boot.ci(boottest, type="bca")
boottest$t0
boottest$t
boottest$call
boot.ci(boottest, type="norm")
boot.ci(boottest, type="norm", index=1)
boot.ci(boottest, type="norm", index=2)
boot.ci(boottest, type="norm", index=3)
boottest$data
mean(abs(boottest$t) > abs(boottest$t0))
boottest$t0
boottest$t0[1]
boottest$t[1]
boottest$t0[1]
boottest$t
boottest$t[,1]
mean(abs(boottest$t[,1]) > abs(boottest$t0[1]))
boottest$t0
mean(abs(boottest$t[,1]) > abs(boottest$t0[1]))
mean(abs(boottest$t[,2]) > abs(boottest$t0[2]))
mean(abs(boottest$t[,3]) > abs(boottest$t0[3]))
logCoeff.p = function(data,b,formula) {
d <- data[b,]
return(coefficients(glm(formula, family = binomial(link='logit'),data=d)))
}
boottest <- boot(data = ch4ex2.bh, statistic=logCoeff.p, R=100, formula=badh~numvisit+age)
#Intercept p-value
mean(abs(boottest$t[,1]) > abs(boottest$t0[1]))
#numVisit p-value
mean(abs(boottest$t[,2]) > abs(boottest$t0[2]))
#age p-value
mean(abs(boottest$t[,3]) > abs(boottest$t0[3]))
summary(glm(formula, family = binomial(link='logit'),data=ch4ex2.bh))
logCoeff.p = function(data,b,formula) {
d <- data[b,]
return(coefficients(glm(formula, family = binomial(link='logit'),data=d)))
}
boottest <- boot(data = ch4ex2.bh, statistic=logCoeff.p, R=100, formula=badh~numvisit+age)
#Intercept p-value
mean(abs(boottest$t[,1]) > abs(boottest$t0[1]))
#numVisit p-value
mean(abs(boottest$t[,2]) > abs(boottest$t0[2]))
#age p-value
mean(abs(boottest$t[,3]) > abs(boottest$t0[3]))
summary(glm(badh~., family = binomial(link='logit'),data=ch4ex2.bh))
mean(abs(boottest$t[,1]-mean(boottest$t[,1])) > abs(boottest$t0[1]))
mean(abs(boottest$t[,2]-abs(boottest$t[,2])) > abs(boottest$t0[2]))
mean(abs(boottest$t[,2]-mean(boottest$t[,2])) > abs(boottest$t0[2]))
mean(abs(boottest$t[,3]-mean(boottest$t[,3])) > abs(boottest$t0[3]))
abs(boottest$t[,1]-mean(boottest$t[,1]))
abs(boottest$t0[1])
boottest$t[,1]
mean(abs(boottest$t[,1]) < abs(boottest$t0[1]))
mean(abs(boottest$t[,2]) < abs(boottest$t0[2]))
mean(abs(boottest$t[,3]) < abs(boottest$t0[3]))
logCoeff.p = function(data,b,formula) {
d <- data[b,]
return(coefficients(glm(formula, family = binomial(link='logit'),data=d)))
}
boottest <- boot(data = ch4ex2.bh, statistic=logCoeff.p, R=100, formula=badh~numvisit+age)
#Intercept p-value
mean(abs(boottest$t[,1]) < abs(boottest$t0[1]))
#numVisit p-value
mean(abs(boottest$t[,2]) < abs(boottest$t0[2]))
#age p-value
mean(abs(boottest$t[,3]) < abs(boottest$t0[3]))
summary(glm(badh~., family = binomial(link='logit'),data=ch4ex2.bh))
mean(abs(boottest$t[,1]) < abs(boottest$t0[1]))
mean(abs(boottest$t[,2]) < abs(boottest$t0[2]))
mean(abs(boottest$t[,3]) < abs(boottest$t0[3]))
summary(glm(badh~., family = binomial(link='logit'),data=ch4ex2.bh))
R <- 100
extrema <- apply(X=boottest$t[,1],
MARGIN=1,
FUN=">",
boottest$t0[1])
dim(boottest$t[,1])
boottest$t[,1]
transpose(boottest$t[,1])
t(boottest$t[,1])
extrema <- apply(X=t(boottest$t[,1]),
MARGIN=1,
FUN=">",
boottest$t0[1])
pvals <- rowSums(extrema)/(R+1)
pvals
extrema <- apply(X=boottest$t[,1],
MARGIN=1,
FUN=">",
boottest$t0)
extrema <- apply(X=boottest$t,
MARGIN=1,
FUN=">",
boottest$t0)
pvals <- rowSums(extrema)/(R+1)
pvals
pvals <- rowSums(extrema)/(boottest$R+1)
pvals
xtrema <- apply(X=abs(boottest$t-mean(boottest$t)),
MARGIN=1,
FUN=">",
abs(boottest$t0))
pvals
xtrema <- apply(X=abs(boottest$t-mean(boottest$t)),
MARGIN=1,
FUN=">",
abs(boottest$t0))
pvals <- rowSums(extrema)/(boottest$R+1)
pvals
xtrema
rowSums(extrema)
abs(boottest$t-mean(boottest$t))
boottest$t
xtrema <- apply(X=abs(abs(boottest$t)-mean(abs(boottest$t))),
MARGIN=1,
FUN=">",
abs(boottest$t0))
pvals <- rowSums(extrema)
pvals
abs(abs(boottest$t)-mean(abs(boottest$t)))
xtrema <- apply(X=abs(abs(boottest$t)-mean(abs(boottest$t))),
MARGIN=1,
FUN="<",
abs(boottest$t0))
pvals
boottest$t-mean(boottest$t)
abs(boottest$t-mean(boottest$t))
abs(boottest$t0)
xtrema <- apply(X=abs(boottest$t-mean(boottest$t)),
MARGIN=1,
FUN=">",
abs(boottest$t0))
pvals <- rowSums(xtrema)
pvals
pvals <- rowSums(xtrema)/(boottest$R+1)
pvals
logCoeff.p = function(data,b,formula) {
d <- data[b,]
return(coefficients(glm(formula, family = binomial(link='logit'),data=d)))
}
boottest <- boot(data = ch4ex2.bh, statistic=logCoeff.p, R=100, formula=badh~numvisit+age)
xtrema <- apply(X=abs(boottest$t-mean(boottest$t)),
MARGIN=1,
FUN=">",
abs(boottest$t0))
pvals <- rowSums(xtrema)/(boottest$R+1)
pvals
summary(glm(badh~., family = binomial(link='logit'),data=ch4ex2.bh))
pval3 <- mean(abs(boottest$t[,3]-mean(boottest$t[,3])) > abs(abs(boottest$t0[3]))
summary(glm(badh~., family = binomial(link='logit'),data=ch4ex2.bh))
pval3 <- mean(abs(boottest$t[,3]-mean(boottest$t[,3])) > abs(boottest$t0[3]))
pval3
boottest$t
